/**
 * @fileoverview gRPC-Web generated client stub for service
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.27.2
// source: service.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');

const proto = {};
proto.service = require('./service_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.service.MyServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.service.MyServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.service.ImageGenRequest,
 *   !proto.service.ImageGenResponse>}
 */
const methodDescriptor_MyService_ImageGen = new grpc.web.MethodDescriptor(
  '/service.MyService/ImageGen',
  grpc.web.MethodType.UNARY,
  proto.service.ImageGenRequest,
  proto.service.ImageGenResponse,
  /**
   * @param {!proto.service.ImageGenRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.service.ImageGenResponse.deserializeBinary
);


/**
 * @param {!proto.service.ImageGenRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.service.ImageGenResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.service.ImageGenResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.service.MyServiceClient.prototype.imageGen =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/service.MyService/ImageGen',
      request,
      metadata || {},
      methodDescriptor_MyService_ImageGen,
      callback);
};


/**
 * @param {!proto.service.ImageGenRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.service.ImageGenResponse>}
 *     Promise that resolves to the response
 */
proto.service.MyServicePromiseClient.prototype.imageGen =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/service.MyService/ImageGen',
      request,
      metadata || {},
      methodDescriptor_MyService_ImageGen);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.service.ImgRecoRequest,
 *   !proto.service.ImgRecoResponse>}
 */
const methodDescriptor_MyService_ImgReco = new grpc.web.MethodDescriptor(
  '/service.MyService/ImgReco',
  grpc.web.MethodType.UNARY,
  proto.service.ImgRecoRequest,
  proto.service.ImgRecoResponse,
  /**
   * @param {!proto.service.ImgRecoRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.service.ImgRecoResponse.deserializeBinary
);


/**
 * @param {!proto.service.ImgRecoRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.service.ImgRecoResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.service.ImgRecoResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.service.MyServiceClient.prototype.imgReco =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/service.MyService/ImgReco',
      request,
      metadata || {},
      methodDescriptor_MyService_ImgReco,
      callback);
};


/**
 * @param {!proto.service.ImgRecoRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.service.ImgRecoResponse>}
 *     Promise that resolves to the response
 */
proto.service.MyServicePromiseClient.prototype.imgReco =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/service.MyService/ImgReco',
      request,
      metadata || {},
      methodDescriptor_MyService_ImgReco);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.service.IntegrateRequest,
 *   !proto.service.IntegrateResponse>}
 */
const methodDescriptor_MyService_Integrate = new grpc.web.MethodDescriptor(
  '/service.MyService/Integrate',
  grpc.web.MethodType.UNARY,
  proto.service.IntegrateRequest,
  proto.service.IntegrateResponse,
  /**
   * @param {!proto.service.IntegrateRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.service.IntegrateResponse.deserializeBinary
);


/**
 * @param {!proto.service.IntegrateRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.service.IntegrateResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.service.IntegrateResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.service.MyServiceClient.prototype.integrate =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/service.MyService/Integrate',
      request,
      metadata || {},
      methodDescriptor_MyService_Integrate,
      callback);
};


/**
 * @param {!proto.service.IntegrateRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.service.IntegrateResponse>}
 *     Promise that resolves to the response
 */
proto.service.MyServicePromiseClient.prototype.integrate =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/service.MyService/Integrate',
      request,
      metadata || {},
      methodDescriptor_MyService_Integrate);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.service.TrainWakeWordModelRequest,
 *   !proto.service.TrainWakeWordModelResponse>}
 */
const methodDescriptor_MyService_TrainWakeWordModel = new grpc.web.MethodDescriptor(
  '/service.MyService/TrainWakeWordModel',
  grpc.web.MethodType.UNARY,
  proto.service.TrainWakeWordModelRequest,
  proto.service.TrainWakeWordModelResponse,
  /**
   * @param {!proto.service.TrainWakeWordModelRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.service.TrainWakeWordModelResponse.deserializeBinary
);


/**
 * @param {!proto.service.TrainWakeWordModelRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.service.TrainWakeWordModelResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.service.TrainWakeWordModelResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.service.MyServiceClient.prototype.trainWakeWordModel =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/service.MyService/TrainWakeWordModel',
      request,
      metadata || {},
      methodDescriptor_MyService_TrainWakeWordModel,
      callback);
};


/**
 * @param {!proto.service.TrainWakeWordModelRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.service.TrainWakeWordModelResponse>}
 *     Promise that resolves to the response
 */
proto.service.MyServicePromiseClient.prototype.trainWakeWordModel =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/service.MyService/TrainWakeWordModel',
      request,
      metadata || {},
      methodDescriptor_MyService_TrainWakeWordModel);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.service.CheckModelRequest,
 *   !proto.service.CheckModelResponse>}
 */
const methodDescriptor_MyService_CheckModel = new grpc.web.MethodDescriptor(
  '/service.MyService/CheckModel',
  grpc.web.MethodType.UNARY,
  proto.service.CheckModelRequest,
  proto.service.CheckModelResponse,
  /**
   * @param {!proto.service.CheckModelRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.service.CheckModelResponse.deserializeBinary
);


/**
 * @param {!proto.service.CheckModelRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.service.CheckModelResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.service.CheckModelResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.service.MyServiceClient.prototype.checkModel =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/service.MyService/CheckModel',
      request,
      metadata || {},
      methodDescriptor_MyService_CheckModel,
      callback);
};


/**
 * @param {!proto.service.CheckModelRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.service.CheckModelResponse>}
 *     Promise that resolves to the response
 */
proto.service.MyServicePromiseClient.prototype.checkModel =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/service.MyService/CheckModel',
      request,
      metadata || {},
      methodDescriptor_MyService_CheckModel);
};


module.exports = proto.service;

